"use strict";var g=Object.defineProperty;var m=(t,e,r)=>e in t?g(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r;var s=(t,e,r)=>m(t,typeof e!="symbol"?e+"":e,r);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});class h{constructor(){s(this,"matches",new Map)}save(e){this.matches.set(e.id,e)}remove(e){this.matches.delete(e)}findById(e){return this.matches.get(e)}findByTeams(e,r){return Array.from(this.matches.values()).find(n=>n.homeTeam===e&&n.awayTeam===r||n.homeTeam===r&&n.awayTeam===e)}getAll(){return Array.from(this.matches.values())}}const o=[];for(let t=0;t<256;++t)o.push((t+256).toString(16).slice(1));function y(t,e=0){return(o[t[e+0]]+o[t[e+1]]+o[t[e+2]]+o[t[e+3]]+"-"+o[t[e+4]]+o[t[e+5]]+"-"+o[t[e+6]]+o[t[e+7]]+"-"+o[t[e+8]]+o[t[e+9]]+"-"+o[t[e+10]]+o[t[e+11]]+o[t[e+12]]+o[t[e+13]]+o[t[e+14]]+o[t[e+15]]).toLowerCase()}let c;const S=new Uint8Array(16);function l(){if(!c){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");c=crypto.getRandomValues.bind(crypto)}return c(S)}const b=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),d={randomUUID:b};function w(t,e,r){var a;if(d.randomUUID&&!t)return d.randomUUID();t=t||{};const n=t.random??((a=t.rng)==null?void 0:a.call(t))??l();if(n.length<16)throw new Error("Random bytes length must be >= 16");return n[6]=n[6]&15|64,n[8]=n[8]&63|128,y(n)}function M(t,e){if(!t.trim()||!e.trim())throw new Error("Both home team and away team names are required");if(t===e)throw new Error("Home team and away team cannot be the same");return{homeTeam:t,awayTeam:e,homeScore:0,awayScore:0,startTime:new Date}}function f(t,e,r){if(!Number.isSafeInteger(e)||!Number.isSafeInteger(r))throw new Error("Scores must be safe integers");if(e<0||r<0)throw new Error("Scores cannot be negative");return{...t,homeScore:e,awayScore:r}}function u(t){return t.homeScore+t.awayScore}class p{constructor(e){s(this,"_scoreboardStorage");this._scoreboardStorage=e||new h}startMatch(e,r){if(this._scoreboardStorage.findByTeams(e,r))throw Error("A match with these teams already exists");const a={id:w(),...M(e,r)};return this._scoreboardStorage.save(a),a}updateScore(e,r,n){const a=this.getMatchById(e),i=f(a,r,n);return this._scoreboardStorage.save(i),i}finishMatch(e){return this.getMatchById(e),this._scoreboardStorage.remove(e),!0}getSummary(){return this._scoreboardStorage.getAll().toSorted((r,n)=>{const a=u(n)-u(r);return a!==0?a:n.startTime.getTime()-r.startTime.getTime()})}getAllMatches(){return this._scoreboardStorage.getAll()}getMatchById(e){const r=this._scoreboardStorage.findById(e);if(!r)throw new Error("A match with this ID doesn't exist");return r}findMatch(e,r){return this._scoreboardStorage.findByTeams(e,r)}}exports.InMemoryScoreboardStorage=h;exports.ScoreboardManager=p;
